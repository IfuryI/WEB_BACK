// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/IfuryI/WEB_BACK/internal/playlists (interfaces: UseCase)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	models "github.com/IfuryI/WEB_BACK/internal/models"
	gomock "github.com/golang/mock/gomock"
)

// MockUseCase is a mock of UseCase interface.
type MockUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaseMockRecorder
}

// MockUseCaseMockRecorder is the mock recorder for MockUseCase.
type MockUseCaseMockRecorder struct {
	mock *MockUseCase
}

// NewMockUseCase creates a new mock instance.
func NewMockUseCase(ctrl *gomock.Controller) *MockUseCase {
	mock := &MockUseCase{ctrl: ctrl}
	mock.recorder = &MockUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUseCase) EXPECT() *MockUseCaseMockRecorder {
	return m.recorder
}

// AddMovieToPlaylist mocks base method.
func (m *MockUseCase) AddMovieToPlaylist(arg0 string, arg1, arg2 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMovieToPlaylist", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddMovieToPlaylist indicates an expected call of AddMovieToPlaylist.
func (mr *MockUseCaseMockRecorder) AddMovieToPlaylist(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMovieToPlaylist", reflect.TypeOf((*MockUseCase)(nil).AddMovieToPlaylist), arg0, arg1, arg2)
}

// AddUserToPlaylist mocks base method.
func (m *MockUseCase) AddUserToPlaylist(arg0 string, arg1 int, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUserToPlaylist", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUserToPlaylist indicates an expected call of AddUserToPlaylist.
func (mr *MockUseCaseMockRecorder) AddUserToPlaylist(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUserToPlaylist", reflect.TypeOf((*MockUseCase)(nil).AddUserToPlaylist), arg0, arg1, arg2)
}

// CreatePlaylist mocks base method.
func (m *MockUseCase) CreatePlaylist(arg0, arg1 string, arg2 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePlaylist", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePlaylist indicates an expected call of CreatePlaylist.
func (mr *MockUseCaseMockRecorder) CreatePlaylist(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePlaylist", reflect.TypeOf((*MockUseCase)(nil).CreatePlaylist), arg0, arg1, arg2)
}

// DeleteMovieFromPlaylist mocks base method.
func (m *MockUseCase) DeleteMovieFromPlaylist(arg0 string, arg1, arg2 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMovieFromPlaylist", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMovieFromPlaylist indicates an expected call of DeleteMovieFromPlaylist.
func (mr *MockUseCaseMockRecorder) DeleteMovieFromPlaylist(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMovieFromPlaylist", reflect.TypeOf((*MockUseCase)(nil).DeleteMovieFromPlaylist), arg0, arg1, arg2)
}

// DeletePlaylist mocks base method.
func (m *MockUseCase) DeletePlaylist(arg0 string, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePlaylist", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePlaylist indicates an expected call of DeletePlaylist.
func (mr *MockUseCaseMockRecorder) DeletePlaylist(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePlaylist", reflect.TypeOf((*MockUseCase)(nil).DeletePlaylist), arg0, arg1)
}

// DeleteUserFromPlaylist mocks base method.
func (m *MockUseCase) DeleteUserFromPlaylist(arg0 string, arg1 int, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserFromPlaylist", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserFromPlaylist indicates an expected call of DeleteUserFromPlaylist.
func (mr *MockUseCaseMockRecorder) DeleteUserFromPlaylist(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserFromPlaylist", reflect.TypeOf((*MockUseCase)(nil).DeleteUserFromPlaylist), arg0, arg1, arg2)
}

// GetPlaylist mocks base method.
func (m *MockUseCase) GetPlaylist(arg0 int) (*models.Playlist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlaylist", arg0)
	ret0, _ := ret[0].(*models.Playlist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlaylist indicates an expected call of GetPlaylist.
func (mr *MockUseCaseMockRecorder) GetPlaylist(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlaylist", reflect.TypeOf((*MockUseCase)(nil).GetPlaylist), arg0)
}

// GetPlaylists mocks base method.
func (m *MockUseCase) GetPlaylists(arg0 string) ([]models.Playlist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlaylists", arg0)
	ret0, _ := ret[0].([]models.Playlist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlaylists indicates an expected call of GetPlaylists.
func (mr *MockUseCaseMockRecorder) GetPlaylists(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlaylists", reflect.TypeOf((*MockUseCase)(nil).GetPlaylists), arg0)
}

// GetPlaylistsInfo mocks base method.
func (m *MockUseCase) GetPlaylistsInfo(arg0 string, arg1 int) ([]models.PlaylistsInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlaylistsInfo", arg0, arg1)
	ret0, _ := ret[0].([]models.PlaylistsInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlaylistsInfo indicates an expected call of GetPlaylistsInfo.
func (mr *MockUseCaseMockRecorder) GetPlaylistsInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlaylistsInfo", reflect.TypeOf((*MockUseCase)(nil).GetPlaylistsInfo), arg0, arg1)
}

// UpdatePlaylist mocks base method.
func (m *MockUseCase) UpdatePlaylist(arg0 string, arg1 int, arg2 string, arg3 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePlaylist", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePlaylist indicates an expected call of UpdatePlaylist.
func (mr *MockUseCaseMockRecorder) UpdatePlaylist(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePlaylist", reflect.TypeOf((*MockUseCase)(nil).UpdatePlaylist), arg0, arg1, arg2, arg3)
}
